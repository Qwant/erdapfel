/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/places': {
    /** Get all places in a bounding box. */
    get: operations['get_places_bbox_v1_places_get'];
  };
  '/v1/places/latlon:{lat}:{lon}': {
    /** Find the closest place to a point. */
    get: operations['get_place_latlon_v1_places_latlon__lat___lon__get'];
  };
  '/v1/places/{id}': {
    /** Main handler that returns the requested place. */
    get: operations['get_place_v1_places__id__get'];
  };
  '/v1/categories': {
    /** List all available categories. */
    get: operations['get_all_categories_v1_categories_get'];
  };
  '/v1/reverse/{lat}:{lon}': {
    /** Find the closest address to a point. */
    get: operations['closest_address_v1_reverse__lat___lon__get'];
  };
  '/v1/directions/{f_lon},{f_lat};{t_lon},{t_lat}': {
    /** Get directions to get from a point to another. */
    get: operations['get_directions_with_coordinates_v1_directions__f_lon___f_lat___t_lon___t_lat__get'];
  };
  '/v1/directions': {
    /** Get directions to get from a places to another. */
    get: operations['get_directions_v1_directions_get'];
  };
  '/v1/autocomplete': {
    get: operations['get_autocomplete_response_v1_autocomplete_get'];
    post: operations['get_autocomplete_response_v1_autocomplete_post'];
  };
  '/v1/search': {
    /**
     * Perform a query which is intended to display a relevant result directly (as
     * opposed to `autocomplete` which gives a list of plausible results).
     *
     * Similarly to `instant_answer`, the result will need some quality checks.
     */
    get: operations['search_v1_search_get'];
    /**
     * Perform a query which is intended to display a relevant result directly (as
     * opposed to `autocomplete` which gives a list of plausible results).
     *
     * Similarly to `instant_answer`, the result will need some quality checks.
     */
    post: operations['search_v1_search_post'];
  };
  '/v1/redirect': {
    /**
     * Redirect to the same page as provided URL which must have been provided by
     * Idunn together with an hash value.
     */
    get: operations['follow_redirection_v1_redirect_get'];
  };
  '/v1/instant_answer': {
    /**
     * Perform a query with result intended to be displayed as an instant answer
     * on *qwant.com*.
     *
     * This should not be confused with "Get Places Bbox" as this endpoint will
     * run more restrictive checks on its results.
     */
    get: operations['get_instant_answer_v1_instant_answer_get'];
  };
}

export interface components {
  schemas: {
    /** AccessibilityBlock */
    AccessibilityBlock: {
      /**
       * Type
       * @default accessibility
       * @enum {string}
       */
      type?: 'accessibility';
      /** Wheelchair */
      wheelchair: string;
      /** Toilets Wheelchair */
      toilets_wheelchair: string;
    };
    /** Address */
    Address: {
      /** Id */
      id?: string;
      /** Name */
      name?: string;
      /** Label */
      label?: string;
      /** Housenumber */
      housenumber?: string;
      street?: components['schemas']['Street'];
      /** Postcode */
      postcode?: string;
      /** Admins */
      admins?: components['schemas']['AdministrativeRegion'][];
      admin?: components['schemas']['AdministrativeRegionContext'];
      /** Country Code */
      country_code?: string;
    };
    /** AdministrativeRegion */
    AdministrativeRegion: {
      /** Id */
      id?: string;
      /** Name */
      name?: string;
      /** Label */
      label?: string;
      /** Class Name */
      class_name?: string;
      /** Postcodes */
      postcodes?: string[];
    };
    /** AdministrativeRegionContext */
    AdministrativeRegionContext: {
      /** Label */
      label?: string;
    };
    /** AllCategoriesResponse */
    AllCategoriesResponse: {
      /**
       * Categories
       * @description All available categories
       */
      categories: components['schemas']['CategoryDescription'][];
    };
    /** AssociatedAdmin */
    AssociatedAdmin: {
      /** Id */
      id: string;
      /** Insee */
      insee: string;
      /** Level */
      level: number;
      /** Label */
      label: string;
      /** Name */
      name: string;
      /** Zip Codes */
      zip_codes: string[];
      coord: components['schemas']['Coord'];
      /** Bbox */
      bbox?: [number, number, number, number];
      zone_type?: components['schemas']['ZoneType'];
      /** Parent Id */
      parent_id?: string;
      /** Codes */
      codes: components['schemas']['Code'][];
    };
    /** Beer */
    Beer: {
      /** Name */
      name: string;
    };
    /** BreweryBlock */
    BreweryBlock: {
      /**
       * Type
       * @default brewery
       * @enum {string}
       */
      type?: 'brewery';
      /** Beers */
      beers: components['schemas']['Beer'][];
    };
    /**
     * Category
     * @description An enumeration.
     * @enum {string}
     */
    Category:
      | 'leisure'
      | 'health'
      | 'pharmacy'
      | 'supermarket'
      | 'education'
      | 'service'
      | 'fitness'
      | 'food_french'
      | 'food_pizza'
      | 'food_burger'
      | 'food_italian'
      | 'food_kebab'
      | 'food_sandwich'
      | 'food_asian'
      | 'food_japanese'
      | 'food_chinese'
      | 'food_crepe'
      | 'food_indian'
      | 'food_thai'
      | 'food_vietnamese'
      | 'food_lebanese'
      | 'parking'
      | 'restaurant'
      | 'place_of_worship'
      | 'recycling'
      | 'bicycle_parking'
      | 'school'
      | 'park'
      | 'shop_bakery'
      | 'shop_clothes'
      | 'toilets'
      | 'sports_centre'
      | 'shop_hairdresser'
      | 'shop_supermarket'
      | 'bank'
      | 'fast_food'
      | 'bar'
      | 'hotel'
      | 'historic'
      | 'post_office'
      | 'fuel'
      | 'community_centre'
      | 'shop_convenience'
      | 'shop_car'
      | 'kindergarten'
      | 'camp_site'
      | 'station'
      | 'shop_butcher'
      | 'attraction'
      | 'health_hospital'
      | 'health_doctors'
      | 'health_dentist'
      | 'health_physiotherapist'
      | 'health_pharmacy'
      | 'health_psychotherapist'
      | 'library'
      | 'police'
      | 'shop_optician'
      | 'grave_yard'
      | 'shop_florist'
      | 'fire_station'
      | 'shop_shoes'
      | 'shop_doityourself'
      | 'bicycle_rental'
      | 'museum'
      | 'shop_jewelry'
      | 'shop_newsagent'
      | 'swimming'
      | 'shop_furniture'
      | 'shop_books'
      | 'shop_laundry'
      | 'shop_sports'
      | 'theatre'
      | 'veterinary'
      | 'shop_greengrocer'
      | 'shop_garden_centre'
      | 'arts_centre'
      | 'shop_electronics'
      | 'cinema'
      | 'university'
      | 'shop_travel_agency'
      | 'administrative'
      | 'post_box'
      | 'playground'
      | 'marketplace'
      | 'shop_confectionery'
      | 'shop_locksmith'
      | 'craft_shoemaker'
      | 'shop_alcohol'
      | 'shop_fine_food'
      | 'shop_crop'
      | 'shop_frozen_food'
      | 'amenity_ice_cream'
      | 'shop_seafood'
      | 'shop_baby_goods'
      | 'shop_tatoo'
      | 'shop_erotic'
      | 'shop_watches'
      | 'shop_discount'
      | 'shop_well_being'
      | 'shop_doityourself_clothes'
      | 'shop_medical_supply'
      | 'shop_furnitures'
      | 'shop_outdoor_activites'
      | 'shop_vehicules'
      | 'shop_boat'
      | 'shop_hobbies'
      | 'shop_gift'
      | 'shop_e-cigarette'
      | 'shop_dry_cleaning'
      | 'retirement_home'
      | 'shop_ticket'
      | 'coworking'
      | 'pitch'
      | 'football_pitch'
      | 'boules_pitch'
      | 'basketball_pitch'
      | 'rugby_pitch'
      | 'tennis_pitch'
      | 'skateboard_pitch'
      | 'table_tennis_pitch'
      | 'equestrian_pitch'
      | 'running_track'
      | 'sports_hall'
      | 'sport_climbing'
      | 'sport_martial_art'
      | 'sport_badminton'
      | 'sport_baseball'
      | 'sport_beach_volley_ball'
      | 'sport_golf'
      | 'sport_handball'
      | 'sport_ice_skating'
      | 'sport_karting'
      | 'sport_motor'
      | 'sport_skiing'
      | 'sport_volleyball'
      | 'sport_sailing'
      | 'stadium'
      | 'viewpoint'
      | 'charging_station';

    /** CategoryDescription */
    CategoryDescription: {
      /**
       * Name
       * @description Unique label of the category.
       */
      name: string;
    };
    /** Code */
    Code: {
      /** Name */
      name: string;
      /** Value */
      value: string;
    };
    /** Comment */
    Comment: {
      /** Name */
      name: string;
    };
    /** CommercialMode */
    CommercialMode: {
      /** Id */
      id: string;
      /** Name */
      name: string;
    };
    /** ContactBlock */
    ContactBlock: {
      /**
       * Type
       * @default contact
       * @enum {string}
       */
      type?: 'contact';
      /** Url */
      url: string;
      /** Email */
      email: string;
    };
    /**
     * ContainerType
     * @description An enumeration.
     * @enum {string}
     */
    ContainerType: 'recyclable' | 'glass' | 'unknown';
    /** Context */
    Context: {
      explanation?: components['schemas']['Explanation'];
    };
    /** Coord */
    Coord: {
      /** Lon */
      lon: number;
      /** Lat */
      lat: number;
    };
    /** Covid19Block */
    Covid19Block: {
      /**
       * Type
       * @default covid19
       * @enum {string}
       */
      type?: 'covid19';
      status: components['schemas']['CovidOpeningStatus'];
      opening_hours?: components['schemas']['OpeningHourBlock'];
      /** Note */
      note?: string;
      /** Contribute Url */
      contribute_url?: string;
    };
    /**
     * CovidOpeningStatus
     * @description An enumeration.
     * @enum {string}
     */
    CovidOpeningStatus: 'open_as_usual' | 'open' | 'maybe_open' | 'closed' | 'unknown';
    /** Cuisine */
    Cuisine: {
      /** Name */
      name: string;
    };
    /** CuisineBlock */
    CuisineBlock: {
      /**
       * Type
       * @default cuisine
       * @enum {string}
       */
      type?: 'cuisine';
      /** Cuisines */
      cuisines: components['schemas']['Cuisine'][];
      /** Vegetarian */
      vegetarian: string;
      /** Vegan */
      vegan: string;
      /** Gluten Free */
      gluten_free: string;
    };
    /** DaysType */
    DaysType: {
      /** Dayofweek */
      dayofweek: number;
      /** Local Date */
      local_date: string;
      /** Status */
      status: string;
      /** Opening Hours */
      opening_hours: components['schemas']['OpeningHoursType'][];
    };
    /** DeliveryBlock */
    DeliveryBlock: {
      /**
       * Type
       * @default delivery
       * @enum {string}
       */
      type?: 'delivery';
      click_and_collect: components['schemas']['DeliveryState'];
      delivery: components['schemas']['DeliveryState'];
      takeaway: components['schemas']['DeliveryState'];
    };
    /**
     * DeliveryState
     * @description An enumeration.
     * @enum {undefined}
     */
    DeliveryState: 'yes' | 'unknown';
    /** DescriptionBlock */
    DescriptionBlock: {
      /**
       * Type
       * @default description
       * @enum {string}
       */
      type?: 'description';
      /** Description */
      description: string;
      source: components['schemas']['DescriptionSources'];
      /** Url */
      url?: string;
    };
    /** DescriptionEvent */
    DescriptionEvent: {
      /**
       * Type
       * @default event_description
       * @enum {string}
       */
      type?: 'event_description';
      /** Description */
      description?: string;
      /** Free Text */
      free_text?: string;
      /** Price */
      price?: string;
      /** Tags */
      tags: string[];
    };
    /**
     * DescriptionSources
     * @description An enumeration.
     * @enum {undefined}
     */
    DescriptionSources: 'osm' | 'pagesjaunes' | 'wikipedia';
    /** DirectionsData */
    DirectionsData: {
      /** Routes */
      routes: components['schemas']['DirectionsRoute'][];
      /** Message */
      message?: string;
      /** Code */
      code?: string;
    };
    /** DirectionsResponse */
    DirectionsResponse: {
      /** Status */
      status: string;
      data: components['schemas']['DirectionsData'];
    };
    /** DirectionsRoute */
    DirectionsRoute: {
      /**
       * Duration
       * @description duration in seconds
       */
      duration: number;
      /**
       * Distance
       * @description distance in meters
       */
      distance?: number;
      /**
       * Carbon
       * @description value in gEC
       */
      carbon?: number;
      /** Summary */
      summary?: components['schemas']['RouteSummaryPart'][];
      price?: components['schemas']['RoutePrice'];
      /** Legs */
      legs: components['schemas']['RouteLeg'][];
      /**
       * Geometry
       * @description GeoJSON
       * @default [object Object]
       */
      geometry?: { [key: string]: unknown };
      /** Start Time */
      start_time: string;
      /** End Time */
      end_time: string;
    };
    /** Explanation */
    Explanation: {
      /** Value */
      value: number;
      /** Description */
      description: string;
      /** Details */
      details: components['schemas']['Explanation'][];
    };
    /** ExtraParams */
    ExtraParams: {
      /**
       * Shape
       * @description Restrict search inside of a polygon given in geojson format.
       * @example [object Object]
       */
      shape?: components['schemas']['geojson_pydantic__features__Feature'];
    };
    /** FeatureProperties */
    FeatureProperties: {
      geocoding: components['schemas']['GeocodingPlace'];
    };
    /** FeedPublished */
    FeedPublished: {
      /** Id */
      id: string;
      /** Licence */
      licence: string;
      /** Name */
      name: string;
      /** Url */
      url: string;
    };
    /** Geocoding */
    Geocoding: {
      /**
       * Version
       * @default 0.1.0
       */
      version?: string;
      /** Licence */
      licence?: string;
      /** Attribution */
      attribution?: string;
      /** Query */
      query?: string;
    };
    /** GeocodingPlace */
    GeocodingPlace: {
      /** Type */
      type: string;
      /** Label */
      label?: string;
      /** Name */
      name?: string;
      /** Housenumber */
      housenumber?: string;
      /** Street */
      street?: string;
      /** Locality */
      locality?: string;
      /** Postcode */
      postcode?: string;
      /** City */
      city?: string;
      /** Id */
      id: string;
      /** Zone Type */
      zone_type?: string;
      /** Citycode */
      citycode?: string;
      /** Level */
      level?: number;
      /** Administrative Regions */
      administrative_regions: components['schemas']['AssociatedAdmin'][];
      /**
       * Poi Types
       * @default
       */
      poi_types?: components['schemas']['PoiType'][];
      /**
       * Properties
       * @default
       */
      properties?: components['schemas']['GeocodingProperty'][];
      address?: components['schemas']['GeocodingPlace'];
      /**
       * Commercial Modes
       * @default
       */
      commercial_modes?: components['schemas']['CommercialMode'][];
      /**
       * Comments
       * @default
       */
      comments?: components['schemas']['Comment'][];
      /**
       * Physical Modes
       * @default
       */
      physical_modes?: components['schemas']['PhysicalMode'][];
      /**
       * Lines
       * @default
       */
      lines?: components['schemas']['Line'][];
      /** Timezone */
      timezone?: string;
      /**
       * Codes
       * @default
       */
      codes?: components['schemas']['Code'][];
      /**
       * Feed Publishers
       * @default
       */
      feed_publishers?: components['schemas']['FeedPublished'][];
      /** Bbox */
      bbox?: [number, number, number, number];
      /**
       * Country Codes
       * @default
       */
      country_codes?: string[];
    };
    /** GeocodingProperty */
    GeocodingProperty: {
      /** Key */
      key: string;
      /** Value */
      value: string;
    };
    /** GradesBlock */
    GradesBlock: {
      /**
       * Type
       * @default grades
       * @enum {string}
       */
      type?: 'grades';
      /** Total Grades Count */
      total_grades_count: number;
      /** Global Grade */
      global_grade: number;
      /** Url */
      url?: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** IdunnAutocomplete */
    IdunnAutocomplete: {
      /**
       * Type
       * @default FeatureCollection
       */
      type?: string;
      /**
       * Geocoding
       * @default [object Object]
       */
      geocoding?: components['schemas']['Geocoding'];
      /**
       * Intentions
       * @description Intentions detected by NLU.
       */
      intentions?: components['schemas']['Intention'][];
      /**
       * Features
       * @description Geographic places matching the query.
       * @default
       */
      features?: components['schemas']['idunn__geocoder__models__geocodejson__Feature'][];
    };
    /** Image */
    Image: {
      /** Url */
      url: string;
      /** Alt */
      alt: string;
      /** Credits */
      credits?: string;
      /** Source Url */
      source_url: string;
    };
    /** ImagesBlock */
    ImagesBlock: {
      /**
       * Type
       * @default images
       * @enum {string}
       */
      type?: 'images';
      /** Images */
      images: components['schemas']['Image'][];
    };
    /** InformationBlock */
    InformationBlock: {
      /**
       * Type
       * @default information
       * @enum {string}
       */
      type?: 'information';
      /** Blocks */
      blocks: components['schemas']['ServicesAndInformationBlock'][];
    };
    /** InstantAnswerData */
    InstantAnswerData: {
      query: components['schemas']['InstantAnswerQuery'];
      result: components['schemas']['InstantAnswerResult'];
    };
    /** InstantAnswerQuery */
    InstantAnswerQuery: {
      /** Query */
      query: string;
      /** Lang */
      lang: string;
    };
    /** InstantAnswerResponse */
    InstantAnswerResponse: {
      /**
       * Status
       * @default success
       */
      status?: string;
      data: components['schemas']['InstantAnswerData'];
    };
    /** InstantAnswerResult */
    InstantAnswerResult: {
      /**
       * Places
       * @description List of relevant places to display on the instant answer. At most 1 place is returned if no broad intention has been detected.
       */
      places: components['schemas']['Place'][];
      /** @description Data source for the returned place, or data provider for the list of results. This field is not provided when the instant answer relates to an admnistrative area or an address. */
      source?: components['schemas']['PoiSource'];
      /**
       * Intention Bbox
       * @description Bounding box where the results have been searched for, based on the detected intention. Not provided when no detected intention was used to fetch the results.
       * @example 2.32,48.85,2.367,48.866
       */
      intention_bbox?: [number, number, number, number];
      /**
       * Maps Url
       * Format: uri
       * @description Direct URL to the result(s) on Qwant Maps.
       */
      maps_url: string;
      /**
       * Maps Frame Url
       * Format: uri
       * @description URL to the map displaying the results on Qwant Maps, with no user interface. This URL can be used to display an `<iframe>`.
       */
      maps_frame_url: string;
    };
    /** Intention */
    Intention: {
      type: components['schemas']['IntentionType'];
      /**
       * Filter
       * @description Filter params that can be passed to /places endpoint
       */
      filter: components['schemas']['IntentionFilter'];
      /**
       * Description
       * @description Details about the detected intention, useful to format a human-readable description
       */
      description: components['schemas']['IntentionDescription'];
    };
    /** IntentionDescription */
    IntentionDescription: {
      /** Query */
      query?: string;
      /** Category */
      category?: string;
      place?: components['schemas']['idunn__geocoder__models__geocodejson__Feature'];
    };
    /** IntentionFilter */
    IntentionFilter: {
      /** Q */
      q?: string;
      /** Bbox */
      bbox?: [number, number, number, number];
      /** Category */
      category?: string;
      /** Source */
      source?: string;
    };
    /**
     * IntentionType
     * @description An enumeration.
     * @enum {undefined}
     */
    IntentionType: 'address' | 'brand' | 'category' | 'poi' | 'any_place';
    /** InternetAccessBlock */
    InternetAccessBlock: {
      /**
       * Type
       * @default internet_access
       * @enum {string}
       */
      type?: 'internet_access';
      /** Wifi */
      wifi: boolean;
    };
    /** Line */
    Line: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Code */
      code?: string;
      /** Color */
      color?: string;
      /** Text Color */
      text_color?: string;
      commercial_mode?: components['schemas']['CommercialMode'];
      network?: components['schemas']['Network'];
      physical_modes?: components['schemas']['PhysicalMode'];
      /** Sort Order */
      sort_order?: number;
    };
    /**
     * LineString
     * @description LineString Model
     */
    LineString: {
      /** Coordinates */
      coordinates: (Partial<
        [Partial<number> & Partial<number>, Partial<number> & Partial<number>]
      > &
        Partial<
          [
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>
          ]
        >)[];
      /** Type */
      type?: string;
    };
    /** Link */
    Link: {
      site: components['schemas']['Site'];
      /** Url */
      url: string;
    };
    /**
     * MultiLineString
     * @description MultiLineString Model
     */
    MultiLineString: {
      /** Coordinates */
      coordinates: (Partial<
        [Partial<number> & Partial<number>, Partial<number> & Partial<number>]
      > &
        Partial<
          [
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>
          ]
        >)[][];
      /** Type */
      type?: string;
    };
    /**
     * MultiPoint
     * @description MultiPoint Model
     */
    MultiPoint: {
      /** Coordinates */
      coordinates: (Partial<
        [Partial<number> & Partial<number>, Partial<number> & Partial<number>]
      > &
        Partial<
          [
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>
          ]
        >)[];
      /** Type */
      type?: string;
    };
    /**
     * MultiPolygon
     * @description MultiPolygon Model
     */
    MultiPolygon: {
      /** Coordinates */
      coordinates: (Partial<
        [Partial<number> & Partial<number>, Partial<number> & Partial<number>]
      > &
        Partial<
          [
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>
          ]
        >)[][][];
      /** Type */
      type?: string;
    };
    /** Network */
    Network: {
      /** Id */
      id: string;
      /** Name */
      name: string;
    };
    /** OpeningDayEvent */
    OpeningDayEvent: {
      /**
       * Type
       * @default event_opening_dates
       * @enum {string}
       */
      type?: 'event_opening_dates';
      /**
       * Date Start
       * Format: date-time
       */
      date_start: string;
      /**
       * Date End
       * Format: date-time
       */
      date_end: string;
      /** Space Time Info */
      space_time_info?: string;
      /** Timetable */
      timetable: components['schemas']['TimeTableItem'][];
    };
    /** OpeningHourBlock */
    OpeningHourBlock: {
      /**
       * Type
       * @default opening_hours
       * @enum {string}
       */
      type?: 'opening_hours';
      /** Status */
      status: string;
      /** Next Transition Datetime */
      next_transition_datetime?: string;
      /** Seconds Before Next Transition */
      seconds_before_next_transition?: number;
      /** Is 24 7 */
      is_24_7: boolean;
      /** Raw */
      raw: string;
      /** Days */
      days: components['schemas']['DaysType'][];
    };
    /** OpeningHoursType */
    OpeningHoursType: {
      /** Beginning */
      beginning: string;
      /** End */
      end: string;
    };
    /** PhoneBlock */
    PhoneBlock: {
      /**
       * Type
       * @default phone
       * @enum {string}
       */
      type?: 'phone';
      /** Url */
      url: string;
      /** International Format */
      international_format: string;
      /** Local Format */
      local_format: string;
    };
    /** PhysicalMode */
    PhysicalMode: {
      /** Id */
      id: string;
      /** Name */
      name: string;
    };
    /** Place */
    Place: {
      /** Type */
      type: string;
      /** Id */
      id?: string;
      /** Name */
      name?: string;
      /** Local Name */
      local_name?: string;
      /** Class Name */
      class_name?: string;
      /** Subclass Name */
      subclass_name?: string;
      /** Geometry */
      geometry?: { [key: string]: unknown };
      address?: components['schemas']['Address'];
      /** Blocks */
      blocks: (Partial<components['schemas']['OpeningHourBlock']> &
        Partial<components['schemas']['Covid19Block']> &
        Partial<components['schemas']['PhoneBlock']> &
        Partial<components['schemas']['InformationBlock']> &
        Partial<components['schemas']['WebSiteBlock']> &
        Partial<components['schemas']['ContactBlock']> &
        Partial<components['schemas']['ServicesAndInformationBlock']> &
        Partial<components['schemas']['AccessibilityBlock']> &
        Partial<components['schemas']['InternetAccessBlock']> &
        Partial<components['schemas']['BreweryBlock']> &
        Partial<components['schemas']['ImagesBlock']> &
        Partial<components['schemas']['GradesBlock']> &
        Partial<components['schemas']['OpeningDayEvent']> &
        Partial<components['schemas']['DescriptionEvent']> &
        Partial<components['schemas']['CuisineBlock']> &
        Partial<components['schemas']['Weather']> &
        Partial<components['schemas']['RecyclingBlock']> &
        Partial<components['schemas']['TransactionalBlock']> &
        Partial<components['schemas']['SocialBlock']> &
        Partial<components['schemas']['DescriptionBlock']> &
        Partial<components['schemas']['DeliveryBlock']> &
        Partial<components['schemas']['StarsBlock']>)[];
      meta: components['schemas']['PlaceMeta'];
    };
    /** PlaceMeta */
    PlaceMeta: {
      /** Source */
      source?: string;
      /**
       * Source Url
       * @description URL to the place details at the source
       */
      source_url?: string;
      /**
       * Contribute Url
       * @description Url to edit place details. Defined for OSM POIs only.
       */
      contribute_url?: string;
      /**
       * Maps Place Url
       * Format: uri
       * @description Direct URL to the place details on Qwant Maps.
       */
      maps_place_url: string;
      /**
       * Maps Directions Url
       * Format: uri
       * @description Direct URL to the directions on Qwant Maps, with the current place selected as destination.
       */
      maps_directions_url: string;
    };
    /**
     * PlaceType
     * @description An enumeration.
     * @enum {string}
     */
    PlaceType: 'address' | 'admin' | 'poi' | 'street';
    /** PlacesBboxResponse */
    PlacesBboxResponse: {
      /** Places */
      places: unknown[];
      source: components['schemas']['PoiSource'];
      /**
       * Bbox
       * @description Minimal bbox containing all results. `null` if no result is found. May be larger than or outside of the original bbox passed in the query if `?extend_bbox=true` was set.
       * @example 2.32,48.85,2.367,48.866
       */
      bbox?: [number, number, number, number];
      /**
       * Bbox Extended
       * @description `true` if `?extend_bbox=true` was set and search has been executed on an extended bbox, after no result was found in the original bbox passed in the query.
       */
      bbox_extended: boolean;
    };
    /**
     * PoiSource
     * @description An enumeration.
     * @enum {string}
     */
    PoiSource: 'osm' | 'pages_jaunes';
    /** PoiType */
    PoiType: {
      /** Id */
      id: string;
      /** Name */
      name: string;
    };
    /**
     * Point
     * @description Point Model
     */
    Point: {
      /** Coordinates */
      coordinates: Partial<[Partial<number> & Partial<number>, Partial<number> & Partial<number>]> &
        Partial<
          [
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>
          ]
        >;
      /** Type */
      type?: string;
    };
    /**
     * Polygon
     * @description Polygon Model
     */
    Polygon: {
      /** Coordinates */
      coordinates: (Partial<
        [Partial<number> & Partial<number>, Partial<number> & Partial<number>]
      > &
        Partial<
          [
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>
          ]
        >)[][];
      /** Type */
      type?: string;
    };
    /** RecyclingBlock */
    RecyclingBlock: {
      /**
       * Type
       * @default recycling
       * @enum {string}
       */
      type?: 'recycling';
      /** Containers */
      containers: components['schemas']['RecyclingContainer'][];
    };
    /** RecyclingContainer */
    RecyclingContainer: {
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Filling Level */
      filling_level: number;
      type: components['schemas']['ContainerType'];
      /** Place Description */
      place_description: string;
    };
    /** RouteLeg */
    RouteLeg: {
      /**
       * Duration
       * @description duration in seconds
       */
      duration: number;
      /**
       * Distance
       * @description distance in meters
       */
      distance?: number;
      /** Summary */
      summary: string;
      /**
       * Steps
       * @default
       */
      steps?: components['schemas']['RouteStep'][];
      /**
       * Stops
       * @default
       */
      stops?: components['schemas']['TransportStop'][];
      info?: components['schemas']['TransportInfo'];
      /** @default UNKNOW */
      mode?: components['schemas']['TransportMode'];
      from?: components['schemas']['TransportStop'];
      to?: components['schemas']['TransportStop'];
    };
    /** RouteManeuver */
    RouteManeuver: {
      /**
       * Location
       * @description [lon, lat]
       */
      location: [number, number];
      /** Modifier */
      modifier?: string;
      /** Type */
      type?: string;
      /** Instruction */
      instruction: string;
    };
    /** RoutePrice */
    RoutePrice: {
      /** Currency */
      currency: string;
      /** Value */
      value: string;
      /** Group */
      group?: boolean;
    };
    /** RouteStep */
    RouteStep: {
      maneuver: components['schemas']['RouteManeuver'];
      /** Duration */
      duration: number;
      /** Distance */
      distance: number;
      /**
       * Geometry
       * @description GeoJSON
       */
      geometry: { [key: string]: unknown };
      mode: components['schemas']['TransportMode'];
    };
    /** RouteSummaryPart */
    RouteSummaryPart: {
      mode: components['schemas']['TransportMode'];
      info?: components['schemas']['TransportInfo'];
      /**
       * Distance
       * @description distance in meters
       */
      distance: number;
      /**
       * Duration
       * @description duration in seconds
       */
      duration: number;
    };
    /** ServicesAndInformationBlock */
    ServicesAndInformationBlock: {
      /**
       * Type
       * @default services_and_information
       * @enum {string}
       */
      type?: 'services_and_information';
      /** Blocks */
      blocks: (Partial<components['schemas']['AccessibilityBlock']> &
        Partial<components['schemas']['InternetAccessBlock']> &
        Partial<components['schemas']['BreweryBlock']> &
        Partial<components['schemas']['CuisineBlock']>)[];
    };
    /**
     * Site
     * @description An enumeration.
     * @enum {string}
     */
    Site: 'facebook' | 'twitter' | 'instagram' | 'youtube';
    /** SocialBlock */
    SocialBlock: {
      /**
       * Type
       * @default social
       * @enum {string}
       */
      type?: 'social';
      /** Links */
      links: components['schemas']['Link'][];
    };
    /**
     * StarsAvailable
     * @description An enumeration.
     * @enum {undefined}
     */
    StarsAvailable: 'yes' | 'no';
    /** StarsBlock */
    StarsBlock: {
      /**
       * Type
       * @default stars
       * @enum {string}
       */
      type?: 'stars';
      /** Ratings */
      ratings: components['schemas']['StarsDetails'][];
    };
    /** StarsDetails */
    StarsDetails: {
      has_stars: components['schemas']['StarsAvailable'];
      /** Nb Stars */
      nb_stars?: number;
      kind: components['schemas']['StarsKind'];
    };
    /**
     * StarsKind
     * @description An enumeration.
     * @enum {undefined}
     */
    StarsKind: 'lodging' | 'restaurant';
    /** Street */
    Street: {
      /** Id */
      id?: string;
      /** Name */
      name?: string;
      /** Label */
      label?: string;
      /** Postcodes */
      postcodes?: string[];
    };
    /** TimeTableItem */
    TimeTableItem: {
      /**
       * Beginning
       * Format: date-time
       */
      beginning: string;
      /**
       * End
       * Format: date-time
       */
      end: string;
    };
    /** TransactionalBlock */
    TransactionalBlock: {
      /**
       * Type
       * @default transactional
       * @enum {string}
       */
      type?: 'transactional';
      /** Booking Url */
      booking_url?: string;
      /** Appointment Url */
      appointment_url?: string;
      /** Quotation Request Url */
      quotation_request_url?: string;
    };
    /** TransportInfo */
    TransportInfo: {
      /** Num */
      num?: string;
      /** Direction */
      direction?: string;
      /** Linecolor */
      lineColor?: string;
      /** Network */
      network?: string;
    };
    /**
     * TransportMode
     * @description An enumeration.
     * @enum {string}
     */
    TransportMode:
      | 'WALK'
      | 'BICYCLE'
      | 'CAR'
      | 'BOAT'
      | 'PLANE'
      | 'TRAIN'
      | 'CARPOOL'
      | 'BUS'
      | 'BUS_CITY'
      | 'VTC'
      | 'TAXI'
      | 'BIKE'
      | 'TRAM'
      | 'CAR_RENTAL'
      | 'TRANSFERT'
      | 'SUBWAY'
      | 'SUBURBAN_TRAIN'
      | 'SEAPLANE'
      | 'HELICOPTER'
      | 'FUNICULAR'
      | 'SHUTTLE'
      | 'UNKNOW'
      | 'WAIT';
    /** TransportStop */
    TransportStop: {
      /** Id */
      id?: string;
      /** Name */
      name?: string;
      /**
       * Location
       * @description [lon, lat]
       */
      location: [number, number];
    };
    /**
     * Type
     * @description An enumeration.
     * @enum {string}
     */
    Type: 'house' | 'poi' | 'public_transport:stop_area' | 'street' | 'zone';
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * Verbosity
     * @description Control the verbosity of the output.
     * @enum {string}
     */
    Verbosity: 'long' | 'short' | 'list';
    /** Weather */
    Weather: {
      /**
       * Type
       * @default weather
       * @enum {string}
       */
      type?: 'weather';
      /** Temperature */
      temperature?: number;
      /** Icon */
      icon?: string;
    };
    /** WebSiteBlock */
    WebSiteBlock: {
      /**
       * Type
       * @default website
       * @enum {string}
       */
      type?: 'website';
      /**
       * Url
       * Format: uri
       */
      url: string;
      /** Label */
      label: string;
    };
    /**
     * ZoneType
     * @description An enumeration.
     * @enum {string}
     */
    ZoneType:
      | 'suburb'
      | 'city_district'
      | 'city'
      | 'state_district'
      | 'state'
      | 'country_region'
      | 'country'
      | 'non_administrative';
    /**
     * Feature
     * @description Feature Model
     */
    geojson_pydantic__features__Feature: {
      /** Type */
      type?: string;
      /** Geometry */
      geometry: Partial<components['schemas']['Point']> &
        Partial<components['schemas']['MultiPoint']> &
        Partial<components['schemas']['LineString']> &
        Partial<components['schemas']['MultiLineString']> &
        Partial<components['schemas']['Polygon']> &
        Partial<components['schemas']['MultiPolygon']>;
      /** Properties */
      properties?: { [key: string]: unknown };
      /** Id */
      id?: string;
      /** Bbox */
      bbox?: Partial<
        [
          Partial<number> & Partial<number>,
          Partial<number> & Partial<number>,
          Partial<number> & Partial<number>,
          Partial<number> & Partial<number>
        ]
      > &
        Partial<
          [
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>,
            Partial<number> & Partial<number>
          ]
        >;
    };
    /** Feature */
    idunn__geocoder__models__geocodejson__Feature: {
      /**
       * Type
       * @default Feature
       */
      type?: string;
      /** Geometry */
      geometry: { [key: string]: unknown };
      properties: components['schemas']['FeatureProperties'];
      /** Distance */
      distance?: number;
      context?: components['schemas']['Context'];
    };
  };
}

export interface operations {
  /** Get all places in a bounding box. */
  get_places_bbox_v1_places_get: {
    parameters: {
      query: {
        /** Format: left_lon,bottom_lat,right_lon,top_lat */
        bbox: string;
        category?: components['schemas']['Category'][];
        raw_filter?: string[];
        source?: string;
        /** Full text query */
        q?: string;
        size?: number;
        lang?: string;
        verbosity?: components['schemas']['Verbosity'];
        extend_bbox?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PlacesBboxResponse'];
        };
      };
      /** Client Error in query params */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Find the closest place to a point. */
  get_place_latlon_v1_places_latlon__lat___lon__get: {
    parameters: {
      path: {
        lat: number;
        lon: number;
      };
      query: {
        lang?: string;
        verbosity?: components['schemas']['Verbosity'];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Place'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Main handler that returns the requested place. */
  get_place_v1_places__id__get: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        lang?: string;
        /** Restrict the type of documents to search in. */
        type?: components['schemas']['PlaceType'];
        verbosity?: components['schemas']['Verbosity'];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Place'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** List all available categories. */
  get_all_categories_v1_categories_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AllCategoriesResponse'];
        };
      };
    };
  };
  /** Find the closest address to a point. */
  closest_address_v1_reverse__lat___lon__get: {
    parameters: {
      path: {
        lat: number;
        lon: number;
      };
      query: {
        lang?: unknown;
        verbosity?: components['schemas']['Verbosity'];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Address'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get directions to get from a point to another. */
  get_directions_with_coordinates_v1_directions__f_lon___f_lat___t_lon___t_lat__get: {
    parameters: {
      path: {
        f_lon: number;
        f_lat: number;
        t_lon: number;
        t_lat: number;
      };
      query: {
        /** Transport mode */
        type: string;
        language?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DirectionsResponse'];
        };
      };
      /** Requested Path Not Allowed. */
      422: unknown;
    };
  };
  /** Get directions to get from a places to another. */
  get_directions_v1_directions_get: {
    parameters: {
      query: {
        /** Origin place id. */
        origin: string;
        /** Destination place id. */
        destination: string;
        /** Transport mode. */
        type: string;
        /** User language. */
        language?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DirectionsResponse'];
        };
      };
      /** Requested Path Not Allowed. */
      422: unknown;
    };
  };
  get_autocomplete_response_v1_autocomplete_get: {
    parameters: {
      query: {
        q: string;
        /** Latitude of the focus point. */
        lon?: number;
        /** Longitude of the focus point. */
        lat?: number;
        /** Zoom level used to compute how far from the focus point results will typically be. */
        zoom?: number;
        lang?: string;
        /** Maximum number of results. */
        limit?: number;
        /** Point dataset name. */
        pt_dataset?: string[];
        /** POI dataset name. */
        poi_dataset?: string[];
        /** Search through the entire dataset while ignoring the coverage filter of the geocoder. */
        all_data?: boolean;
        /** Skip the first results */
        offset?: number;
        /** Timeout for the queries to the geocoder. */
        timeout?: number;
        /** Filter on type of document. */
        type?: components['schemas']['Type'][];
        /** Filter on type of zone. */
        zone_type?: components['schemas']['ZoneType'][];
        /** Filter on type of POI. */
        poi_type?: string[];
        /** Perform NLU analysis to extract location and intention from the request. */
        nlu?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IdunnAutocomplete'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExtraParams'];
      };
    };
  };
  get_autocomplete_response_v1_autocomplete_post: {
    parameters: {
      query: {
        q: string;
        /** Latitude of the focus point. */
        lon?: number;
        /** Longitude of the focus point. */
        lat?: number;
        /** Zoom level used to compute how far from the focus point results will typically be. */
        zoom?: number;
        lang?: string;
        /** Maximum number of results. */
        limit?: number;
        /** Point dataset name. */
        pt_dataset?: string[];
        /** POI dataset name. */
        poi_dataset?: string[];
        /** Search through the entire dataset while ignoring the coverage filter of the geocoder. */
        all_data?: boolean;
        /** Skip the first results */
        offset?: number;
        /** Timeout for the queries to the geocoder. */
        timeout?: number;
        /** Filter on type of document. */
        type?: components['schemas']['Type'][];
        /** Filter on type of zone. */
        zone_type?: components['schemas']['ZoneType'][];
        /** Filter on type of POI. */
        poi_type?: string[];
        /** Perform NLU analysis to extract location and intention from the request. */
        nlu?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IdunnAutocomplete'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExtraParams'];
      };
    };
  };
  /**
   * Perform a query which is intended to display a relevant result directly (as
   * opposed to `autocomplete` which gives a list of plausible results).
   *
   * Similarly to `instant_answer`, the result will need some quality checks.
   */
  search_v1_search_get: {
    parameters: {
      query: {
        q: string;
        /** Latitude of the focus point. */
        lon?: number;
        /** Longitude of the focus point. */
        lat?: number;
        /** Zoom level used to compute how far from the focus point results will typically be. */
        zoom?: number;
        lang?: string;
        /** Maximum number of results. */
        limit?: number;
        /** Point dataset name. */
        pt_dataset?: string[];
        /** POI dataset name. */
        poi_dataset?: string[];
        /** Search through the entire dataset while ignoring the coverage filter of the geocoder. */
        all_data?: boolean;
        /** Skip the first results */
        offset?: number;
        /** Timeout for the queries to the geocoder. */
        timeout?: number;
        /** Filter on type of document. */
        type?: components['schemas']['Type'][];
        /** Filter on type of zone. */
        zone_type?: components['schemas']['ZoneType'][];
        /** Filter on type of POI. */
        poi_type?: string[];
        /** Perform NLU analysis to extract location and intention from the request. */
        nlu?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IdunnAutocomplete'];
        };
      };
      /** Empty search provided */
      204: never;
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExtraParams'];
      };
    };
  };
  /**
   * Perform a query which is intended to display a relevant result directly (as
   * opposed to `autocomplete` which gives a list of plausible results).
   *
   * Similarly to `instant_answer`, the result will need some quality checks.
   */
  search_v1_search_post: {
    parameters: {
      query: {
        q: string;
        /** Latitude of the focus point. */
        lon?: number;
        /** Longitude of the focus point. */
        lat?: number;
        /** Zoom level used to compute how far from the focus point results will typically be. */
        zoom?: number;
        lang?: string;
        /** Maximum number of results. */
        limit?: number;
        /** Point dataset name. */
        pt_dataset?: string[];
        /** POI dataset name. */
        poi_dataset?: string[];
        /** Search through the entire dataset while ignoring the coverage filter of the geocoder. */
        all_data?: boolean;
        /** Skip the first results */
        offset?: number;
        /** Timeout for the queries to the geocoder. */
        timeout?: number;
        /** Filter on type of document. */
        type?: components['schemas']['Type'][];
        /** Filter on type of zone. */
        zone_type?: components['schemas']['ZoneType'][];
        /** Filter on type of POI. */
        poi_type?: string[];
        /** Perform NLU analysis to extract location and intention from the request. */
        nlu?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IdunnAutocomplete'];
        };
      };
      /** Empty search provided */
      204: never;
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExtraParams'];
      };
    };
  };
  /**
   * Redirect to the same page as provided URL which must have been provided by
   * Idunn together with an hash value.
   */
  follow_redirection_v1_redirect_get: {
    parameters: {
      query: {
        /** An external URL that is expected to redirect. */
        url: string;
        /** Value of the hash provided by Idunn. */
        hash: string;
      };
    };
    responses: {
      /** Successful Response */
      307: {
        content: {
          'application/json': unknown;
        };
      };
      /** Wrong URL hash. */
      403: unknown;
      /** The URL does not redirect. */
      404: unknown;
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Perform a query with result intended to be displayed as an instant answer
   * on *qwant.com*.
   *
   * This should not be confused with "Get Places Bbox" as this endpoint will
   * run more restrictive checks on its results.
   */
  get_instant_answer_v1_instant_answer_get: {
    parameters: {
      query: {
        q: string;
        lang?: string;
        user_country?: string;
      };
      header: {
        'x-client-hash'?: string;
      };
    };
    responses: {
      /** Details about place(s) to display */
      200: {
        content: {
          'application/json': components['schemas']['InstantAnswerResponse'];
        };
      };
      /** No instant answer to display */
      204: never;
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
